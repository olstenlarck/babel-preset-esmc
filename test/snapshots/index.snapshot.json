{"foo bar":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":1,"str":"(t) => {\n  t.ok(createPreset());\n  t.ok(createPreset().presets);\n  t.ok(createPreset().plugins);\n}","title":"foo bar"},"should return config for browsers, non-commonjs":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":2,"str":"(t) => {\n  proc.env.ESMC_BROWSERS = 'true';\n  const config = createPreset();\n  const presetEnv = config.presets[0];\n  const { targets, modules } = presetEnv[1];\n\n  t.ok(presetEnv);\n  t.ok(modules === false);\n  t.ok(presetEnv[0] === '@babel/preset-env');\n  t.ok(targets.browsers);\n  t.ok(targets.browsers.includes('>= 1%, not dead'));\n\n  delete proc.env.ESMC_BROWSERS;\n  delete proc.env.ESMC_CJS;\n}","title":"should return config for browsers, non-commonjs"},"should return config for browsers, commonjs":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":3,"str":"(t) => {\n  proc.env.ESMC_BROWSERS = 'true';\n  proc.env.ESMC_CJS = 'true';\n\n  const config = createPreset();\n  const presetEnv = config.presets[0];\n  const { targets, modules } = presetEnv[1];\n\n  t.ok(presetEnv);\n  t.ok(modules === 'commonjs');\n  t.ok(presetEnv[0] === '@babel/preset-env');\n  t.ok(targets.browsers);\n  t.ok(targets.browsers.includes('>= 1%, not dead'));\n\n  delete proc.env.ESMC_BROWSERS;\n  delete proc.env.ESMC_CJS;\n}","title":"should return config for browsers, commonjs"},"should return config for nodejs":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":4,"str":"(t) => {\n  const config = createPreset();\n  const presetEnv = config.presets[0];\n  const { targets } = presetEnv[1];\n\n  t.deepEqual(targets, { node: '8.9' });\n}","title":"should return config for nodejs"},"should nodejs be equal to ESMC_NODEJS_VERSION env":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":5,"str":"(t) => {\n  proc.env.ESMC_NODE_VERSION = '6.8';\n  const config = createPreset();\n\n  t.deepEqual(config.presets[0][1].targets, { node: '6.8' });\n  delete proc.env.ESMC_NODE_VERSION;\n}","title":"should nodejs be equal to ESMC_NODEJS_VERSION env"},"should browsers be ESMC_BROWSERSLIST env":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":6,"str":"(t) => {\n  proc.env.ESMC_BROWSERS = 'true';\n  proc.env.ESMC_BROWSERSLIST = 'last 2 versions';\n  const config = createPreset();\n\n  t.deepEqual(config.presets[0][1].targets, { browsers: 'last 2 versions' });\n  delete proc.env.ESMC_BROWSERS;\n  delete proc.env.ESMC_BROWSERSLIST;\n}","title":"should browsers be ESMC_BROWSERSLIST env"}}